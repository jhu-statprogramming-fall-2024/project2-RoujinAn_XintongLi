library(tidyverse)
library(rvest)
html <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
html
library(tidyverse)
library(rvest)
html <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
html
starring <- html %>%
html_elements(".info .starring") %>%
html_text(trim = TRUE)
starring
starring
library(tidyverse)
library(rvest)
html <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
html
starring <- html %>%
html_elements(".info .Starring") %>%
html_text(trim = TRUE)
starring
library(rvest)
library(dplyr)
# Define the URL
url <- "https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/"
# Read the webpage
page <- read_html(url)
# Extract names under "Starring" section
starring_names <- page %>%
html_elements(".info .starring a") %>% # Targeting anchor tags within "Starring" class
html_text(trim = TRUE) # Extract and trim text
# Convert to data frame and count frequencies
actor_counts <- data.frame(Actor = starring_names) %>%
count(Actor, sort = TRUE)
# Display results
print(actor_counts)
library(rvest)
# Define the URL
url <- "https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/"
# Read the webpage
page <- read_html(url)
# Extract actor names after 'Starring' descriptor
starring_names <- page %>%
html_elements(".info .cast a") %>% # Adjust this based on observed structure around 'Starring'
html_text(trim = TRUE)
# Print results
print(starring_names)
library(rvest)
# Define the URL
url <- "https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/"
# Read the webpage
page <- read_html(url)
# Extract content of elements with the 'descriptor' class
descriptors <- page %>%
html_elements(".descriptor") %>% # Select elements with the class 'descriptor'
html_text(trim = TRUE) # Extract and trim text content
# Print the results
print(descriptors)
library(rvest)
# Define the URL
url <- "https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/"
# Read the webpage
page <- read_html(url)
# Extract content within the 'info cast' class
cast_content <- page %>%
html_elements(".info.cast") %>% # Select elements with class 'info cast'
html_text(trim = TRUE) # Extract and trim text content
# Print the results
print(cast_content)
library(rvest)
page <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
cast <- page %>%
html_elements(".info.cast") %>%
html_text(trim = TRUE)
print(cast_content)
class(cast)
actor_counts <- data.frame(Actor = cast_content) %>%
count(Actor, sort = TRUE)
actor_counts
library(rvest)
page <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
cast <- page %>%
html_elements(".info.cast") %>%
html_text(trim = TRUE)
cast <- gsub("Starring:\\s*", "", cast)
cast
library(rvest)
page <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
cast <- page %>%
html_elements(".info.director") %>%
html_text(trim = TRUE)
cast <- gsub("Directed By:\\s*", "", cast)
cast
counts <- count(director)
library(rvest)
page <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
director <- page %>%
html_elements(".info.director") %>%
html_text(trim = TRUE)
director <- gsub("Directed By:\\s*", "", director)
director <- data.frame(director)
counts <- count(director)
counts
director
counts <- count(director)
counts
print(director)
class(director)
str(director)
counts <- count(director$director)
counts <- table(director$director)
counts
filtered_director <- director %>% filter(n > 1)
class(counts)
filtered_director <- counts %>% filter(n > 1)
library(rvest)
page <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
director <- page %>%
html_elements(".info.director") %>%
html_text(trim = TRUE)
director <- gsub("Directed By:\\s*", "", director)
director <- data.frame(director)
director <- director %>% rename(director_name = director)
counts <- table(director$director_name)
counts <- as.data.frame(counts)
filtered_director <- counts %>% filter(n > 1)
class(filtered_director)
filtered_director <- counts %>% filter(n > 1)
library(rvest)
page <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
director <- page %>%
html_elements(".info.director") %>%
html_text(trim = TRUE)
director <- gsub("Directed By:\\s*", "", director)
director <- data.frame(director)
director <- director %>% rename(director_name = director)
counts <- table(director$director_name)
counts <- as.data.frame(counts)
filtered_director <- counts %>% filter(n > 1)
head(counts)
library(rvest)
page <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
director <- page %>%
html_elements(".info.director") %>%
html_text(trim = TRUE)
director <- gsub("Directed By:\\s*", "", director)
director <- data.frame(director)
director <- director %>% rename(director_name = director)
counts <- table(director$director_name)
counts <- as.data.frame(counts)
filtered_director <- counts %>% filter(Freq > 1)
filtered_director
library(rvest)
page <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
director <- page %>%
html_elements(".info.director") %>%
html_text(trim = TRUE)
director <- gsub("Directed By:\\s*", "", director)
director <- data.frame(director)
director <- director %>% rename(director_name = director)
freq <- table(director$director_name)
freq <- as.data.frame(freq)
filtered_director <- freq %>% filter(Freq > 1)
filtered_director
#| message: false
#| warning: false
library(dplyr)
library(rvest)
page <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
director <- page %>%
html_elements(".info.director") %>%
html_text(trim = TRUE)
director <- gsub("Directed By:\\s*", "", director)
director <- data.frame(director)
director <- director %>% rename(director_name = director)
freq <- table(director$director_name)
freq <- as.data.frame(freq)
filtered_director <- freq %>% filter(Freq > 1)
filtered_director <- filtered_director %>%
rename(Frequency = Freq, Director_name = Var1)
filtered_director
#Save data locally
write_csv(income_data, "income_data.csv")
# Median Household Income
income_data <- get_acs(
geography = "state",
variables = "B19013_001",
year = 2020,
survey = "acs5"
)
library(tidycensus)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(lubridate)
library(purrr)
library(sf)
census_api_key("9d5d2ec5ead1cb2d84a9499115e07a1b27dec01c")
# Median Household Income
income_data <- get_acs(
geography = "state",
variables = "B19013_001",
year = 2020,
survey = "acs5"
)
#Save data locally
write_csv(income_data, "income_data.csv")
# Poverty Data
poverty_data <- get_acs(
geography = "state",
variables = "B17001_002",
year = 2020,
survey = "acs5"
)
#Save data locally
write_csv(poverty_data, "/Users/roujinan/Desktop/project2_RoujinAn/poverty_data.csv")
# Median Household Income
income_data <- get_acs(
geography = "state",
variables = "B19013_001",
year = 2020,
survey = "acs5"
)
#Save data locally
write_csv(income_data, "income_data.csv")
# Poverty Data
poverty_data <- get_acs(
geography = "state",
variables = "B17001_002",
year = 2020,
survey = "acs5"
)
#Save data locally
write_csv(poverty_data, "poverty_data.csv")
# education
education_college <- get_acs(
geography = "state",
variables = "B15003_022",  # Bachelor's degree
year = 2020,
survey = "acs5"
)
#Save data locally
write_csv(education_college, "education_college.csv")
# Total Population for Poverty Rate
total_population <- get_acs(
geography = "state",
variables = "B01003_001",  # Total population
year = 2020,
survey = "acs5"
)
#Save data locally
write_csv(total_population, "total_population.csv")
# Total Population 25+ for Education Rate
total_adult_population <- get_acs(
geography = "state",
variables = "B15003_001",  # Total population aged 25+
year = 2020,
survey = "acs5"
)
#Save data locally
write_csv(total_adult_population, "total_adult_population.csv")
head(income_data)
head(poverty_data)
head(education_college)
head(total_population)
head(total_adult_population)
