theme(
axis.text.y = element_text(size = 5), # Adjust font size
plot.margin = margin(10, 15, 10, 15)  # Add more space around the plot
) +
scale_y_continuous(expand = expansion(mult = c(0, 0.1)))
#| message: false
#| warning: false
# load packages
library(dplyr)
library(rvest)
library(ggplot2)
# read the HTML content from the rotten tomatoes webpage: 100 Best Movies on Netflix Ranked by Tomatometer (November 2024)
page <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
# extract director information
director <- page %>%
html_elements(".info.director") %>% # target elements with class ".info.director" containing director info
html_text(trim = TRUE) # trim whitespace
# clean extracted text by removing "Directed By:"
director <- gsub("Directed By:\\s*", "", director)
# convert the cleaned data to a data frame
director <- data.frame(director)
# rename the column to distinguish between column name and data frame name
director <- director %>% rename(director_name = director)
# create a frequency table to count the occurrences of each director
freq <- table(director$director_name)
# convert the frequency table to a data frame so filter() can be applied
freq <- as.data.frame(freq)
# ranked the occurrences of each director by frequency in descending order
ranked_director <- freq %>%
rename(Frequency = Freq, Director_name = Var1) %>%
arrange(desc(Frequency))
ranked_director
ggplot(ranked_director, aes(x = reorder(Director_name, -Frequency), y = Frequency, fill = Frequency)) +
geom_col() +
coord_flip() +
labs(
title = "Top Directors in 'Best Netflix Movies' List",
x = "Director",
y = "Number of Movies",
caption = "Source: Rotten Tomatoes"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 5), # Adjust font size
plot.margin = margin(100, 15, 10, 15)  # Add more space around the plot
) +
scale_y_continuous(expand = expansion(mult = c(0, 0.1)))
#| message: false
#| warning: false
# load packages
library(dplyr)
library(rvest)
library(ggplot2)
# read the HTML content from the rotten tomatoes webpage: 100 Best Movies on Netflix Ranked by Tomatometer (November 2024)
page <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
# extract director information
director <- page %>%
html_elements(".info.director") %>% # target elements with class ".info.director" containing director info
html_text(trim = TRUE) # trim whitespace
# clean extracted text by removing "Directed By:"
director <- gsub("Directed By:\\s*", "", director)
# convert the cleaned data to a data frame
director <- data.frame(director)
# rename the column to distinguish between column name and data frame name
director <- director %>% rename(director_name = director)
# create a frequency table to count the occurrences of each director
freq <- table(director$director_name)
# convert the frequency table to a data frame so filter() can be applied
freq <- as.data.frame(freq)
# ranked the occurrences of each director by frequency in descending order
ranked_director <- freq %>%
rename(Frequency = Freq, Director_name = Var1) %>%
arrange(desc(Frequency))
ranked_director
ggplot(ranked_director, aes(x = reorder(Director_name, -Frequency), y = Frequency, fill = Frequency)) +
geom_col() +
coord_flip() +
labs(
title = "Top Directors in 'Best Netflix Movies' List",
x = "Director",
y = "Number of Movies",
caption = "Source: Rotten Tomatoes"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 5), # Adjust font size
plot.margin = margin(5, 10, 5, 10)  # Add more space around the plot
) +
scale_y_continuous(expand = expansion(mult = c(0, 0.1)))
#| message: false
#| warning: false
# load packages
library(dplyr)
library(rvest)
library(ggplot2)
# read the HTML content from the rotten tomatoes webpage: 100 Best Movies on Netflix Ranked by Tomatometer (November 2024)
page <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
# extract director information
director <- page %>%
html_elements(".info.director") %>% # target elements with class ".info.director" containing director info
html_text(trim = TRUE) # trim whitespace
# clean extracted text by removing "Directed By:"
director <- gsub("Directed By:\\s*", "", director)
# convert the cleaned data to a data frame
director <- data.frame(director)
# rename the column to distinguish between column name and data frame name
director <- director %>% rename(director_name = director)
# create a frequency table to count the occurrences of each director
freq <- table(director$director_name)
# convert the frequency table to a data frame so filter() can be applied
freq <- as.data.frame(freq)
# ranked the occurrences of each director by frequency in descending order
ranked_director <- freq %>%
rename(Frequency = Freq, Director_name = Var1) %>%
arrange(desc(Frequency))
ranked_director
ggplot(ranked_director, aes(x = reorder(Director_name, -Frequency), y = Frequency, fill = Frequency)) +
geom_col() +
coord_flip() +
labs(
title = "Top Directors in 'Best Netflix Movies' List",
x = "Director",
y = "Number of Movies",
caption = "Source: Rotten Tomatoes"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 5), # Adjust font size
plot.margin = margin(5, 10, 5, 10)  # Add more space around the plot
) +
scale_y_continuous(expand = expansion(mult = c(0, 0.6)))
#| message: false
#| warning: false
# load packages
library(dplyr)
library(rvest)
library(ggplot2)
# read the HTML content from the rotten tomatoes webpage: 100 Best Movies on Netflix Ranked by Tomatometer (November 2024)
page <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
# extract director information
director <- page %>%
html_elements(".info.director") %>% # target elements with class ".info.director" containing director info
html_text(trim = TRUE) # trim whitespace
# clean extracted text by removing "Directed By:"
director <- gsub("Directed By:\\s*", "", director)
# convert the cleaned data to a data frame
director <- data.frame(director)
# rename the column to distinguish between column name and data frame name
director <- director %>% rename(director_name = director)
# create a frequency table to count the occurrences of each director
freq <- table(director$director_name)
# convert the frequency table to a data frame so filter() can be applied
freq <- as.data.frame(freq)
# ranked the occurrences of each director by frequency in descending order
ranked_director <- freq %>%
rename(Frequency = Freq, Director_name = Var1) %>%
arrange(desc(Frequency))
ranked_director
ggplot(ranked_director, aes(x = reorder(Director_name, -Frequency), y = Frequency, fill = Frequency)) +
geom_col() +
coord_flip() +
labs(
title = "Top Directors in 'Best Netflix Movies' List",
x = "Director",
y = "Number of Movies",
caption = "Source: Rotten Tomatoes"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 5), # Adjust font size
plot.margin = margin(5, 10, 5, 10)  # Add more space around the plot
) +
scale_y_continuous(expand = expansion(mult = c(0, 0.05)))
ggplot(ranked_director, aes(x = reorder(Director_name, -Frequency), y = Frequency, fill = Frequency)) +
geom_col() +
coord_flip() +
labs(
title = "Top Directors in 'Best Netflix Movies' List",
x = "Director",
y = "Number of Movies",
caption = "Source: Rotten Tomatoes"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 5)) # Adjust font size
#| message: false
#| warning: false
# load packages
library(dplyr)
library(rvest)
library(ggplot2)
# read the HTML content from the rotten tomatoes webpage: 100 Best Movies on Netflix Ranked by Tomatometer (November 2024)
page <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
# extract director information
director <- page %>%
html_elements(".info.director") %>% # target elements with class ".info.director" containing director info
html_text(trim = TRUE) # trim whitespace
# clean extracted text by removing "Directed By:"
director <- gsub("Directed By:\\s*", "", director)
# convert the cleaned data to a data frame
director <- data.frame(director)
# rename the column to distinguish between column name and data frame name
director <- director %>% rename(director_name = director)
# create a frequency table to count the occurrences of each director
freq <- table(director$director_name)
# convert the frequency table to a data frame so filter() can be applied
freq <- as.data.frame(freq)
# ranked the occurrences of each director by frequency in descending order
ranked_director <- freq %>%
rename(Frequency = Freq, Director_name = Var1) %>%
arrange(desc(Frequency))
ranked_director
ggplot(ranked_director, aes(x = reorder(Director_name, -Frequency), y = Frequency, fill = Frequency)) +
geom_col() +
coord_flip() +
labs(
title = "Top Directors in 'Best Netflix Movies' List",
x = "Director",
y = "Number of Movies",
caption = "Source: Rotten Tomatoes"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 5)) # Adjust font size
#| message: false
#| warning: false
# load packages
library(dplyr)
library(rvest)
library(ggplot2)
# read the HTML content from the rotten tomatoes webpage: 100 Best Movies on Netflix Ranked by Tomatometer (November 2024)
page <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
# extract director information
director <- page %>%
html_elements(".info.director") %>% # target elements with class ".info.director" containing director info
html_text(trim = TRUE) # trim whitespace
# clean extracted text by removing "Directed By:"
director <- gsub("Directed By:\\s*", "", director)
# convert the cleaned data to a data frame
director <- data.frame(director)
# rename the column to distinguish between column name and data frame name
director <- director %>% rename(director_name = director)
# create a frequency table to count the occurrences of each director
freq <- table(director$director_name)
# convert the frequency table to a data frame so filter() can be applied
freq <- as.data.frame(freq)
# ranked the occurrences of each director by frequency in descending order
ranked_director <- freq %>%
rename(Frequency = Freq, Director_name = Var1) %>%
arrange(desc(Frequency))
ranked_director
ggplot(ranked_director, aes(x = reorder(Director_name, -Frequency), y = Frequency, fill = Frequency)) +
geom_col() +
coord_flip() +
labs(
title = "Top Directors in 'Best Netflix Movies' List",
x = "Director",
y = "Number of Movies",
caption = "Source: Rotten Tomatoes"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 5), # Adjust font size
scale_y_continuous(expand = expansion(mult = c(0, 0.05))
#| message: false
#| warning: false
# load packages
library(dplyr)
library(rvest)
library(ggplot2)
# read the HTML content from the rotten tomatoes webpage: 100 Best Movies on Netflix Ranked by Tomatometer (November 2024)
page <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
# extract director information
director <- page %>%
html_elements(".info.director") %>% # target elements with class ".info.director" containing director info
html_text(trim = TRUE) # trim whitespace
# clean extracted text by removing "Directed By:"
director <- gsub("Directed By:\\s*", "", director)
# convert the cleaned data to a data frame
director <- data.frame(director)
# rename the column to distinguish between column name and data frame name
director <- director %>% rename(director_name = director)
# create a frequency table to count the occurrences of each director
freq <- table(director$director_name)
# convert the frequency table to a data frame so filter() can be applied
freq <- as.data.frame(freq)
# ranked the occurrences of each director by frequency in descending order
ranked_director <- freq %>%
rename(Frequency = Freq, Director_name = Var1) %>%
arrange(desc(Frequency))
ranked_director
ggplot(ranked_director, aes(x = reorder(Director_name, -Frequency), y = Frequency, fill = Frequency)) +
geom_col() +
coord_flip() +
labs(
title = "Top Directors in 'Best Netflix Movies' List",
x = "Director",
y = "Number of Movies",
caption = "Source: Rotten Tomatoes"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 5), # Adjust font size
scale_y_continuous(expand = expansion(mult = c(0, 0.05)))
#| message: false
#| warning: false
# load packages
library(dplyr)
library(rvest)
library(ggplot2)
# read the HTML content from the rotten tomatoes webpage: 100 Best Movies on Netflix Ranked by Tomatometer (November 2024)
page <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
# extract director information
director <- page %>%
html_elements(".info.director") %>% # target elements with class ".info.director" containing director info
html_text(trim = TRUE) # trim whitespace
# clean extracted text by removing "Directed By:"
director <- gsub("Directed By:\\s*", "", director)
# convert the cleaned data to a data frame
director <- data.frame(director)
# rename the column to distinguish between column name and data frame name
director <- director %>% rename(director_name = director)
# create a frequency table to count the occurrences of each director
freq <- table(director$director_name)
# convert the frequency table to a data frame so filter() can be applied
freq <- as.data.frame(freq)
# ranked the occurrences of each director by frequency in descending order
ranked_director <- freq %>%
rename(Frequency = Freq, Director_name = Var1) %>%
arrange(desc(Frequency))
ranked_director
ggplot(ranked_director, aes(x = reorder(Director_name, -Frequency), y = Frequency, fill = Frequency)) +
geom_col() +
coord_flip() +
labs(
title = "Top Directors in 'Best Netflix Movies' List",
x = "Director",
y = "Number of Movies",
caption = "Source: Rotten Tomatoes"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 5), # Adjust font size
scale_y_continuous(expand = expansion(mult = c(0, 0.05))
#| message: false
#| warning: false
# load packages
library(dplyr)
library(rvest)
library(ggplot2)
# read the HTML content from the rotten tomatoes webpage: 100 Best Movies on Netflix Ranked by Tomatometer (November 2024)
page <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
# extract director information
director <- page %>%
html_elements(".info.director") %>% # target elements with class ".info.director" containing director info
html_text(trim = TRUE) # trim whitespace
# clean extracted text by removing "Directed By:"
director <- gsub("Directed By:\\s*", "", director)
# convert the cleaned data to a data frame
director <- data.frame(director)
# rename the column to distinguish between column name and data frame name
director <- director %>% rename(director_name = director)
# create a frequency table to count the occurrences of each director
freq <- table(director$director_name)
# convert the frequency table to a data frame so filter() can be applied
freq <- as.data.frame(freq)
# ranked the occurrences of each director by frequency in descending order
ranked_director <- freq %>%
rename(Frequency = Freq, Director_name = Var1) %>%
arrange(desc(Frequency))
ranked_director
ggplot(ranked_director, aes(x = reorder(Director_name, -Frequency), y = Frequency, fill = Frequency)) +
geom_col() +
coord_flip() +
labs(
title = "Top Directors in 'Best Netflix Movies' List",
x = "Director",
y = "Number of Movies",
caption = "Source: Rotten Tomatoes"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 5)  # Adjust font size
) +
scale_y_continuous(expand = expansion(mult = c(0, 0.05)))  # Correct placement of scale_y_continuous
#| message: false
#| warning: false
# load packages
library(dplyr)
library(rvest)
library(ggplot2)
# read the HTML content from the rotten tomatoes webpage: 100 Best Movies on Netflix Ranked by Tomatometer (November 2024)
page <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
# extract director information
director <- page %>%
html_elements(".info.director") %>% # target elements with class ".info.director" containing director info
html_text(trim = TRUE) # trim whitespace
# clean extracted text by removing "Directed By:"
director <- gsub("Directed By:\\s*", "", director)
# convert the cleaned data to a data frame
director <- data.frame(director)
# rename the column to distinguish between column name and data frame name
director <- director %>% rename(director_name = director)
# create a frequency table to count the occurrences of each director
freq <- table(director$director_name)
# convert the frequency table to a data frame so filter() can be applied
freq <- as.data.frame(freq)
# ranked the occurrences of each director by frequency in descending order
ranked_director <- freq %>%
rename(Frequency = Freq, Director_name = Var1) %>%
arrange(desc(Frequency))
ranked_director
ggplot(ranked_director, aes(x = reorder(Director_name, -Frequency), y = Frequency, fill = Frequency)) +
geom_col() +
coord_flip() +
labs(
title = "Top Directors in 'Best Netflix Movies' List",
x = "Director",
y = "Number of Movies",
caption = "Source: Rotten Tomatoes"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 5)  # Adjust font size
) #+
#scale_y_continuous(expand = expansion(mult = c(0, 0.05)))  # Correct placement of scale_y_continuous
#| message: false
#| warning: false
# load packages
library(dplyr)
library(rvest)
library(ggplot2)
# read the HTML content from the rotten tomatoes webpage: 100 Best Movies on Netflix Ranked by Tomatometer (November 2024)
page <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
# extract director information
director <- page %>%
html_elements(".info.director") %>% # target elements with class ".info.director" containing director info
html_text(trim = TRUE) # trim whitespace
# clean extracted text by removing "Directed By:"
director <- gsub("Directed By:\\s*", "", director)
# convert the cleaned data to a data frame
director <- data.frame(director)
# rename the column to distinguish between column name and data frame name
director <- director %>% rename(director_name = director)
# create a frequency table to count the occurrences of each director
freq <- table(director$director_name)
# convert the frequency table to a data frame so filter() can be applied
freq <- as.data.frame(freq)
# ranked the occurrences of each director by frequency in descending order
ranked_director <- freq %>%
rename(Frequency = Freq, Director_name = Var1) %>%
arrange(desc(Frequency))
ranked_director
# bar plot to visualize the frequency
ggplot(ranked_director, aes(x = reorder(Director_name, -Frequency), y = Frequency, fill = Frequency)) +
geom_col() +
coord_flip() +
labs(
title = "Top Directors in 'Best Netflix Movies' List",
x = "Director",
y = "Number of Movies",
caption = "Source: Rotten Tomatoes"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 5),  # Adjust font size of row label
plot.margin = margin(1, 1, 1, 1)
) +
scale_y_continuous(expand = expansion(mult = c(0, 0.05)))  # Correct placement of scale_y_continuous
#| message: false
#| warning: false
# load packages
library(dplyr)
library(rvest)
library(ggplot2)
# read the HTML content from the rotten tomatoes webpage: 100 Best Movies on Netflix Ranked by Tomatometer (November 2024)
page <- read_html("https://editorial.rottentomatoes.com/guide/best-netflix-movies-to-watch-right-now/")
# extract director information
director <- page %>%
html_elements(".info.director") %>% # target elements with class ".info.director" containing director info
html_text(trim = TRUE) # trim whitespace
# clean extracted text by removing "Directed By:"
director <- gsub("Directed By:\\s*", "", director)
# convert the cleaned data to a data frame
director <- data.frame(director)
# rename the column to distinguish between column name and data frame name
director <- director %>% rename(director_name = director)
# create a frequency table to count the occurrences of each director
freq <- table(director$director_name)
# convert the frequency table to a data frame so filter() can be applied
freq <- as.data.frame(freq)
# ranked the occurrences of each director by frequency in descending order
ranked_director <- freq %>%
rename(Frequency = Freq, Director_name = Var1) %>%
arrange(desc(Frequency))
ranked_director
# bar plot to visualize the frequency
ggplot(ranked_director, aes(x = reorder(Director_name, -Frequency), y = Frequency, fill = Frequency)) +
geom_col() +
coord_flip() +
labs(
title = "Top Directors in 'Best Netflix Movies' List",
x = "Director",
y = "Number of Movies",
caption = "Source: Rotten Tomatoes"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 3),  # Adjust font size of row label
plot.margin = margin(1, 1, 1, 1)
) +
scale_y_continuous(expand = expansion(mult = c(0, 0.05)))  # Correct placement of scale_y_continuous
